# This is the main EBS-GOBii stack file.
# This is written for docker v19 and above. Although it may work for docker versions below 19, no testing has been done for those versions.
# @author Kevin Palis <kdp44@cornell.edu>
version: '3.8'
networks:
  ebs-net:
    attachable: true
services:
  #+------------------------+
  ## GOBii Services
  #+------------------------+
  gobii-db:
    image: ${GOBII_DB_IMAGE_PATH}:${GOBII_TAG}
    ports:
      - target: 5432
        published: 5433
        protocol: tcp
        mode: ingress
    networks:
      - ebs-net
    environment:
      - gobiiuid=${GOBII_UID}
      - gobiigid=${GOBII_GID}
      - gobiiuserpassword=${DOCKER_GOBII_ADMIN_PASSWORD}
    volumes:  
      - ${GOBII_DATA_PATH}:/data
      - gobiipostgresetcubuntu:/etc/postgresql
      - gobiipostgreslogubuntu:/var/log/postgresql
      - gobiipostgreslibubuntu:/var/lib/postgresql
    entrypoint: /usr/bin/env
    command: >
      bash -c "
      echo Starting gobii_db...;
      cp -RT /var/liquibase /data/liquibase;
      chown -R gadm:gobii /data/liquibase;

      cd /data/liquibase;
      java -jar /data/liquibase/bin/liquibase.jar --username=$$DB_USERNAME --password=$$DB_PASS --url=jdbc:postgresql://$$DOCKER_DB_HOST:$$DOCKER_DB_PORT/$$DB_NAME_CROP1 --driver=org.postgresql.Driver --classpath=drivers/postgresql-42.2.10.jar --changeLogFile=changelogs/db.changelog-master.xml --contexts=$$LIQUIBASE_CROP1_CONTEXTS update;
      /root/config.sh"
    #this one turns interactive mode on (equal to -i)
    # stdin_open: true
    #allocates a pseudo-tty (equal to -t)
    tty: true
    #checks if postgres is running and the schema was created
    healthcheck:
      test: runuser -l postgres -c "psql -d gobii_dev -c 'select value from gobiiprop;' || exit 1"
      interval: 1m30s
      timeout: 20s
      retries: 3
    #these don't work with docker-compose up and are simply ignored, but keeping the settings here for when we get to explore swarm
    deploy:
      placement:
        constraints:
          - node.labels.type == db_server
      mode: replicated
      replicas: 1
      endpoint_mode: vip
      labels:
        org.ebs.service.description: "This is the GOBii DB Node"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 180s
  gobii-process:
    image: ${GOBII_PROCESS_IMAGE_PATH}:${GOBII_TAG}
    ports:
      - target: 22
        published: 2222
        protocol: tcp
        mode: ingress
    networks:
      - ebs-net
    volumes:  
      - ${GOBII_DATA_PATH}:/data
    depends_on:
      - "gobii-db"
    # stdin_open: true
    tty: true
    entrypoint: /usr/bin/env
    command: >
      bash -c "
      echo Starting gobii_process...;
      cp -RT /var/gobii_bundle /data/gobii_bundle;
      chown -R gadm:gobii /data/gobii_bundle;
      bash"
    deploy:
      placement:
        constraints:
          - node.labels.type == process_server
      mode: replicated
      replicas: 1
      endpoint_mode: vip
      labels:
        org.ebs.service.description: "This is the GOBii Compute Node"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 180s
  gobii-timescope:
    image: ${GOBII_TIMESCOPE_IMAGE_PATH}:${GOBII_TAG}
    #container_name: gobii-web-node #swarm manages the naming, so you are not allowed to name containers explicitly
    ports:
      - target: 8080
        published: 8081
        protocol: tcp
        mode: ingress
    networks:
      - ebs-net
    environment: #Environment variables
      VAR1: "Sample Var"
    depends_on:
      - "gobii-db"
    # stdin_open: true
    tty: true
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: vip
      #restrict where swarm places this service
      labels:
        org.ebs.service.description: "This is the GOBii Timescope Node"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 180s #How long to wait before deciding if a restart has succeeded, specified as a duration (default: decide immediately).
    healthcheck:
      test: "wget --quiet --spider http://localhost:8080/ || exit 1"
      interval: 10s
      timeout: 30s
      retries: 3
volumes:
  #useful for compose but not swarm
  # app_data:
  #   external: false
  # ndd_data:
  #   external: false
  gobiipostgresetcubuntu:
    external: false
  gobiipostgreslogubuntu:
    external: false
  gobiipostgreslibubuntu:
    external: false
