# This is the main EBS-GOBii stack file.
# This is written for docker v19 and above. Although it may work for docker versions below 19, no testing has been done for those versions.
# @author Kevin Palis <kdp44@cornell.edu>
# @author John Palis <johnv.palis@gmail.com>

version: '3.8'

networks:
  ebs_network:
    #driver: overlay #uncomment if in swarm mode, for compose, this will cause errors as overlay requires swarm
    name: ${EBS_DOCKER_NETWORK_NAME}
    attachable: true
services:
  #+------------------------+
  ## GOBii Services
  #+------------------------+
  # DB
  gobii-db:
    image: ${GOBII_DB_IMAGE}:${GOBII_DB_IMAGE_TAG}
    ports:
      - target: ${GOBII_DB_TARGET_PORT}
        published: ${GOBII_DB_PUBLISHED_PORT}
        protocol: tcp
        mode: ingress
    environment:
      - postgres_local_auth_method=${POSTGRES_LOCAL_AUTH_METHOD}
      - postgres_host_auth_method=${POSTGRES_HOST_AUTH_METHOD}
      - postgres_listen_address=${POSTGRES_LISTEN_ADDRESS}
      - db_user=${GOBII_DB_USER}
      - db_pass=${GOBII_DB_PASSWORD}
      - db_name=${GOBII_DB_NAME}
      - pg_driver=${PG_DRIVER}
      - lq_contexts=${LIQUIBASE_CONTEXTS}
      - lq_labels=${LIQUIBASE_LABELS}
      - default_statistigobii_target=${DEFAULT_STATISTIGOBII_TARGET}
      - random_page_cost=${RANDOM_PAGE_COST}
      - effective_cache_size=${EFFECTIVE_CACHE_SIZE}
      - max_parallel_workers_per_gather=${MAX_PARALLEL_WORKERS_PER_GATHER}
      - max_parallel_workers=${MAX_PARALLEL_WORKERS}
      - os_user=${OS_USER}
      - os_pass=${OS_PASS}
      - os_group=${OS_GROUP}
    networks:
      - ${EBS_DOCKER_NETWORK_NAME}
    volumes:
      - ${POSTGRES_ETC}:/etc/postgresql
      - ${POSTGRES_LOG}:/var/log/postgresql
      - ${POSTGRES_LIB}:/var/lib/postgresql
    #allocates a pseudo-tty (equal to -t)
    tty: true
    #we can modify the healthcheck to check the actual BA schema later on (like in gobiiprop)
    healthcheck:
      test: pg_isready -U postgres || exit 1
      interval: 50s
      timeout: 20s
      retries: 3
    #these are simply ignored by docker if ran in compose - but are important to swarm mode!
    deploy:
      placement:
        constraints:
          - node.labels.type == gobii_db_node
      mode: replicated
      replicas: 1
      endpoint_mode: vip
      labels:
        org.ebs.service.description: "This is the GOBII DB Node"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 180s
  #PROCESS
  gobii-process:
    image: ${GOBII_PROCESS_IMAGE}:${GOBII_PROCESS_IMAGE_TAG}
    ports:
      - target: 22
        published: 2222
        protocol: tcp
        mode: ingress
    environment:
      - db_pass=${GOBII_DB_PASSWORD}
    networks:
      - ${EBS_DOCKER_NETWORK_NAME}
    volumes:
      - ${GOBII_DATA_PATH}:/data
    depends_on:
      - "gobii-db"
    # stdin_open: true
    tty: true
    entrypoint: /usr/bin/env
    command: >
      bash -c "
      echo Starting gobii_process...;
      bash"
    deploy:
      placement:
        constraints:
          - node.labels.type == gobii_process_node
      mode: replicated
      replicas: 1
      endpoint_mode: vip
      labels:
        org.ebs.service.description: "This is the GOBii Process Node"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 180s
  gobii-timescope:
    image: ${GOBII_TIMESCOPE_IMAGE}:${GOBII_TIMESCOPE_IMAGE_TAG}
    ports:
      - target: 8080
        published: 8081
        protocol: tcp
        mode: ingress
    networks:
      - ${EBS_DOCKER_NETWORK_NAME}
    environment: #Environment variables
      VAR1: "Sample Var"
    depends_on:
      - "gobii-db"
    # stdin_open: true
    tty: true
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: vip
      #restrict where swarm places this service
      labels:
        org.ebs.service.description: "This is the GOBii Timescope Node"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 180s #How long to wait before deciding if a restart has succeeded, specified as a duration (default: decide immediately).
    healthcheck:
      test: "wget --quiet --spider http://localhost:8080/ || exit 1"
      interval: 10s
      timeout: 30s
      retries: 3
  gobii-api:
    image: ${GOBII_API_IMAGE}:${GOBII_API_IMAGE_TAG}
    ports:
      - target: 8080
        published: ${GOBII_API_PUBLISHED_PORT}
        protocol: tcp
        mode: ingress
    environment:
      - spring_profiles_active=${API_ACTIVE_PROFILE}
      - spring_datasource_url=jdbc:postgresql://gobii-db:${GOBII_DB_TARGET_PORT}/${GOBII_DB_NAME}
      - spring_datasource_username=${GOBII_DB_USER}
      - spring_datasource_password=${GOBII_DB_PASSWORD}
    networks:
      - ${EBS_DOCKER_NETWORK_NAME}
    volumes:
      - ${GOBII_DATA_PATH}:/data
      - ${SEARCH_CALLS_PATH}:/searchCalls
    depends_on:
      - "gobii-db"
      - "gobii-process"
    tty: true
    deploy:
      placement:
        constraints:
          - node.labels.type == gobii_api_node
      mode: replicated
      replicas: 1
      endpoint_mode: vip
      labels:
        org.ebs.service.description: "This is the GOBii API Node"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/actuator/health || exit 1"
      interval: 25s
      timeout: 3s
      retries: 3

volumes:
  #when using local DB volumes - comment out if using mounted host volumes
  gobii_postgres_etc:
    external: false
  gobii_postgres_log:
    external: false
  gobii_postgres_lib:
    external: false
